/*
 * Copyright (C) 2013 Lucien Xu <sfietkonstantin@free.fr>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

// This class is autogenerated using themehelper.py
// Any modification done in this file will be overridden

#include "nemothemepagedimmer.h"

NemoThemePageDimmer::NemoThemePageDimmer(QObject *parent)
    : QObject(parent)
    , m_height(15)
    , m_startPosition(0)
    , m_endPosition(1.0)
{
}

QColor NemoThemePageDimmer::startColor() const
{
    return m_startColor;
}

void NemoThemePageDimmer::setStartColor(const QColor &startColor)
{
    if (m_startColor != startColor) {
        m_startColor = startColor;
        emit startColorChanged();
    }
}

QColor NemoThemePageDimmer::endColor() const
{
    return m_endColor;
}

void NemoThemePageDimmer::setEndColor(const QColor &endColor)
{
    if (m_endColor != endColor) {
        m_endColor = endColor;
        emit endColorChanged();
    }
}

int NemoThemePageDimmer::height() const
{
    return m_height;
}

void NemoThemePageDimmer::setHeight(int height)
{
    if (m_height != height) {
        m_height = height;
        emit heightChanged();
    }
}

void NemoThemePageDimmer::setHeightDefault()
{
    if (m_height != 15) {
        m_height = 15;
        emit heightChanged();
    }
}

double NemoThemePageDimmer::startPosition() const
{
    return m_startPosition;
}

void NemoThemePageDimmer::setStartPosition(double startPosition)
{
    if (m_startPosition != startPosition) {
        m_startPosition = startPosition;
        emit startPositionChanged();
    }
}

void NemoThemePageDimmer::setStartPositionDefault()
{
    if (m_startPosition != 0) {
        m_startPosition = 0;
        emit startPositionChanged();
    }
}

double NemoThemePageDimmer::endPosition() const
{
    return m_endPosition;
}

void NemoThemePageDimmer::setEndPosition(double endPosition)
{
    if (m_endPosition != endPosition) {
        m_endPosition = endPosition;
        emit endPositionChanged();
    }
}

void NemoThemePageDimmer::setEndPositionDefault()
{
    if (m_endPosition != 1.0) {
        m_endPosition = 1.0;
        emit endPositionChanged();
    }
}
