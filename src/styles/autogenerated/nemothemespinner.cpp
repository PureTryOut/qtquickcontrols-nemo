/*
 * Copyright (C) 2013 Lucien Xu <sfietkonstantin@free.fr>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

// This class is autogenerated using themehelper.py
// Any modification done in this file will be overridden

#include "nemothemespinner.h"

NemoThemeSpinner::NemoThemeSpinner(QObject *parent)
    : QObject(parent)
    , m_radius(32)
    , m_horizontalSpacing(15)
    , m_verticalSpacing(15)
    , m_initialStateDuration(1500)
    , m_transitionDuration(500)
{
}

int NemoThemeSpinner::radius() const
{
    return m_radius;
}

void NemoThemeSpinner::setRadius(int radius)
{
    if (m_radius != radius) {
        m_radius = radius;
        emit radiusChanged();
    }
}

void NemoThemeSpinner::setRadiusDefault()
{
    if (m_radius != 32) {
        m_radius = 32;
        emit radiusChanged();
    }
}

QColor NemoThemeSpinner::primaryColor() const
{
    return m_primaryColor;
}

void NemoThemeSpinner::setPrimaryColor(const QColor &primaryColor)
{
    if (m_primaryColor != primaryColor) {
        m_primaryColor = primaryColor;
        emit primaryColorChanged();
    }
}

QColor NemoThemeSpinner::secondaryColor() const
{
    return m_secondaryColor;
}

void NemoThemeSpinner::setSecondaryColor(const QColor &secondaryColor)
{
    if (m_secondaryColor != secondaryColor) {
        m_secondaryColor = secondaryColor;
        emit secondaryColorChanged();
    }
}

int NemoThemeSpinner::horizontalSpacing() const
{
    return m_horizontalSpacing;
}

void NemoThemeSpinner::setHorizontalSpacing(int horizontalSpacing)
{
    if (m_horizontalSpacing != horizontalSpacing) {
        m_horizontalSpacing = horizontalSpacing;
        emit horizontalSpacingChanged();
    }
}

void NemoThemeSpinner::setHorizontalSpacingDefault()
{
    if (m_horizontalSpacing != 15) {
        m_horizontalSpacing = 15;
        emit horizontalSpacingChanged();
    }
}

int NemoThemeSpinner::verticalSpacing() const
{
    return m_verticalSpacing;
}

void NemoThemeSpinner::setVerticalSpacing(int verticalSpacing)
{
    if (m_verticalSpacing != verticalSpacing) {
        m_verticalSpacing = verticalSpacing;
        emit verticalSpacingChanged();
    }
}

void NemoThemeSpinner::setVerticalSpacingDefault()
{
    if (m_verticalSpacing != 15) {
        m_verticalSpacing = 15;
        emit verticalSpacingChanged();
    }
}

int NemoThemeSpinner::initialStateDuration() const
{
    return m_initialStateDuration;
}

void NemoThemeSpinner::setInitialStateDuration(int initialStateDuration)
{
    if (m_initialStateDuration != initialStateDuration) {
        m_initialStateDuration = initialStateDuration;
        emit initialStateDurationChanged();
    }
}

void NemoThemeSpinner::setInitialStateDurationDefault()
{
    if (m_initialStateDuration != 1500) {
        m_initialStateDuration = 1500;
        emit initialStateDurationChanged();
    }
}

int NemoThemeSpinner::transitionDuration() const
{
    return m_transitionDuration;
}

void NemoThemeSpinner::setTransitionDuration(int transitionDuration)
{
    if (m_transitionDuration != transitionDuration) {
        m_transitionDuration = transitionDuration;
        emit transitionDurationChanged();
    }
}

void NemoThemeSpinner::setTransitionDurationDefault()
{
    if (m_transitionDuration != 500) {
        m_transitionDuration = 500;
        emit transitionDurationChanged();
    }
}
