/*
 * Copyright (C) 2013 Lucien Xu <sfietkonstantin@free.fr>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

// This class is autogenerated using themehelper.py
// Any modification done in this file will be overridden

#ifndef NEMOTHEMESPINNER_H
#define NEMOTHEMESPINNER_H

#include <QtCore/QObject>
#include <QtGui/QColor>

class NemoThemeSpinner: public QObject
{
    Q_OBJECT
    Q_PROPERTY(int radius READ radius NOTIFY radiusChanged)
    Q_PROPERTY(QColor primaryColor READ primaryColor NOTIFY primaryColorChanged)
    Q_PROPERTY(QColor secondaryColor READ secondaryColor NOTIFY secondaryColorChanged)
    Q_PROPERTY(int horizontalSpacing READ horizontalSpacing NOTIFY horizontalSpacingChanged)
    Q_PROPERTY(int verticalSpacing READ verticalSpacing NOTIFY verticalSpacingChanged)
    Q_PROPERTY(int initialStateDuration READ initialStateDuration NOTIFY initialStateDurationChanged)
    Q_PROPERTY(int transitionDuration READ transitionDuration NOTIFY transitionDurationChanged)
public:
    explicit NemoThemeSpinner(QObject *parent = 0);
    int radius() const;
    void setRadius(int radius);
    void setRadiusDefault();
    QColor primaryColor() const;
    void setPrimaryColor(const QColor &primaryColor);
    QColor secondaryColor() const;
    void setSecondaryColor(const QColor &secondaryColor);
    int horizontalSpacing() const;
    void setHorizontalSpacing(int horizontalSpacing);
    void setHorizontalSpacingDefault();
    int verticalSpacing() const;
    void setVerticalSpacing(int verticalSpacing);
    void setVerticalSpacingDefault();
    int initialStateDuration() const;
    void setInitialStateDuration(int initialStateDuration);
    void setInitialStateDurationDefault();
    int transitionDuration() const;
    void setTransitionDuration(int transitionDuration);
    void setTransitionDurationDefault();
Q_SIGNALS:
    void radiusChanged();
    void primaryColorChanged();
    void secondaryColorChanged();
    void horizontalSpacingChanged();
    void verticalSpacingChanged();
    void initialStateDurationChanged();
    void transitionDurationChanged();
private:
    int m_radius;
    QColor m_primaryColor;
    QColor m_secondaryColor;
    int m_horizontalSpacing;
    int m_verticalSpacing;
    int m_initialStateDuration;
    int m_transitionDuration;
};

#endif //NEMOTHEMESPINNER_H
